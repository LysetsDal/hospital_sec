// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: hospital.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Hospital_SendToHospital_FullMethodName     = "/hospital.Hospital/SendToHospital"
	Hospital_SendListToHospital_FullMethodName = "/hospital.Hospital/SendListToHospital"
)

// HospitalClient is the client API for Hospital service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HospitalClient interface {
	SendToHospital(ctx context.Context, in *HospitalRequest, opts ...grpc.CallOption) (*HospitalResponse, error)
	SendListToHospital(ctx context.Context, in *HospitalListReq, opts ...grpc.CallOption) (*HospitalListRes, error)
}

type hospitalClient struct {
	cc grpc.ClientConnInterface
}

func NewHospitalClient(cc grpc.ClientConnInterface) HospitalClient {
	return &hospitalClient{cc}
}

func (c *hospitalClient) SendToHospital(ctx context.Context, in *HospitalRequest, opts ...grpc.CallOption) (*HospitalResponse, error) {
	out := new(HospitalResponse)
	err := c.cc.Invoke(ctx, Hospital_SendToHospital_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalClient) SendListToHospital(ctx context.Context, in *HospitalListReq, opts ...grpc.CallOption) (*HospitalListRes, error) {
	out := new(HospitalListRes)
	err := c.cc.Invoke(ctx, Hospital_SendListToHospital_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HospitalServer is the server API for Hospital service.
// All implementations must embed UnimplementedHospitalServer
// for forward compatibility
type HospitalServer interface {
	SendToHospital(context.Context, *HospitalRequest) (*HospitalResponse, error)
	SendListToHospital(context.Context, *HospitalListReq) (*HospitalListRes, error)
	mustEmbedUnimplementedHospitalServer()
}

// UnimplementedHospitalServer must be embedded to have forward compatible implementations.
type UnimplementedHospitalServer struct {
}

func (UnimplementedHospitalServer) SendToHospital(context.Context, *HospitalRequest) (*HospitalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToHospital not implemented")
}
func (UnimplementedHospitalServer) SendListToHospital(context.Context, *HospitalListReq) (*HospitalListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendListToHospital not implemented")
}
func (UnimplementedHospitalServer) mustEmbedUnimplementedHospitalServer() {}

// UnsafeHospitalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HospitalServer will
// result in compilation errors.
type UnsafeHospitalServer interface {
	mustEmbedUnimplementedHospitalServer()
}

func RegisterHospitalServer(s grpc.ServiceRegistrar, srv HospitalServer) {
	s.RegisterService(&Hospital_ServiceDesc, srv)
}

func _Hospital_SendToHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HospitalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServer).SendToHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hospital_SendToHospital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServer).SendToHospital(ctx, req.(*HospitalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hospital_SendListToHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HospitalListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServer).SendListToHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hospital_SendListToHospital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServer).SendListToHospital(ctx, req.(*HospitalListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Hospital_ServiceDesc is the grpc.ServiceDesc for Hospital service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hospital_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hospital.Hospital",
	HandlerType: (*HospitalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToHospital",
			Handler:    _Hospital_SendToHospital_Handler,
		},
		{
			MethodName: "SendListToHospital",
			Handler:    _Hospital_SendListToHospital_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hospital.proto",
}

const (
	Peer_SendToPeer_FullMethodName = "/hospital.Peer/SendToPeer"
	Peer_Ping_FullMethodName       = "/hospital.Peer/Ping"
)

// PeerClient is the client API for Peer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerClient interface {
	SendToPeer(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*ClientMessage, error)
	Ping(ctx context.Context, in *PeerPing, opts ...grpc.CallOption) (*PingEcho, error)
}

type peerClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerClient(cc grpc.ClientConnInterface) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) SendToPeer(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*ClientMessage, error) {
	out := new(ClientMessage)
	err := c.cc.Invoke(ctx, Peer_SendToPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) Ping(ctx context.Context, in *PeerPing, opts ...grpc.CallOption) (*PingEcho, error) {
	out := new(PingEcho)
	err := c.cc.Invoke(ctx, Peer_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerServer is the server API for Peer service.
// All implementations must embed UnimplementedPeerServer
// for forward compatibility
type PeerServer interface {
	SendToPeer(context.Context, *ClientMessage) (*ClientMessage, error)
	Ping(context.Context, *PeerPing) (*PingEcho, error)
	mustEmbedUnimplementedPeerServer()
}

// UnimplementedPeerServer must be embedded to have forward compatible implementations.
type UnimplementedPeerServer struct {
}

func (UnimplementedPeerServer) SendToPeer(context.Context, *ClientMessage) (*ClientMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToPeer not implemented")
}
func (UnimplementedPeerServer) Ping(context.Context, *PeerPing) (*PingEcho, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPeerServer) mustEmbedUnimplementedPeerServer() {}

// UnsafePeerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerServer will
// result in compilation errors.
type UnsafePeerServer interface {
	mustEmbedUnimplementedPeerServer()
}

func RegisterPeerServer(s grpc.ServiceRegistrar, srv PeerServer) {
	s.RegisterService(&Peer_ServiceDesc, srv)
}

func _Peer_SendToPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).SendToPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Peer_SendToPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).SendToPeer(ctx, req.(*ClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerPing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Peer_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Ping(ctx, req.(*PeerPing))
	}
	return interceptor(ctx, in, info, handler)
}

// Peer_ServiceDesc is the grpc.ServiceDesc for Peer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Peer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hospital.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToPeer",
			Handler:    _Peer_SendToPeer_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Peer_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hospital.proto",
}
